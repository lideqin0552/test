python中关于字符串的一些函数

最近学习到了python的字符串，以此博客记录整理巩固一下花里胡哨的字符串函数
PS：以下函数注释中的中括号 [ ] 仅表示该参数是可选的

    capitalize()
    返回将原字符串的首字母大写的字符串
    casefold()
    返回将原字符串中所有字符改为小写的字符串
    swapcase()
    翻转字符串中的大小写
    count(sub[,start[,end]])
    从 start 位置开始搜索到 end 位置结束，返回子字符串 sub 在字符串该指定范围内出现的次数，start参数默认为首字符的位置，end参数默认为字符串的最后一个位置
    encode(encoding='utf-8',errors='strict')
    以 encoding 指定的编码格式如 “utf-8” 对字符串进行编码，返回编码后的字符串，errors参数可以指定不同的错误处理方案，默认为 ‘strict’
    endswith(sub[,start[,end]])
    检查字符串是否以子字符串 sub 结束，如果是返回True，否则返回False
    可选参数 “start” 和 “end” 表示范围同上
    startswith(sub[,start[,end]])
    与 endswith() 方法类似，只不过是检查字符串是否以子字符串 sub 开头
    expandtabs([tabsize=8])
    把字符串中的 tab 符号 (’\t’) 转换为空格，默认的空格数 tabsize 是 8
    find(sub[,start[,end]])
    检查字符串中是否包含子字符串 sub ，如果包含子字符串则返回索引值，否则返回-1。
    可选参数 “start” 和 “end” 表示范围同上
    rfind(sub[,start[,end]])
    与 find() 方法类似，不过是从右边开始查找
    index(sub[,start[,end]])
    与 find() 方法类似，只不过如果子字符串 sub 不在原字符串中会报一个异常
    rindex(sub[,start[,end]])
    与 index() 方法类似，不过是从右边开始查找
    isalnum()
    如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False
    isalpha()
    如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False
    isdecimal()
    如果字符串只包含十进制数字则返回True，否则返回False
    isdigit()
    如果字符串只包含数字则返回True，否则返回False
    isdigit()
    如果字符串只包含数字则返回True，否则返回False
    isnumeric()
    如果字符串中只包含数字字符，则返回 True，否则返回 False

PS：关于 isdigit() , isdecimal() 和 isnumeric() 的区别可参考以下链接： link.

    isspace()
    如果字符串中只包含空格，则返回 True，否则返回 False
    istitle()
    如果字符串是标题化即所有的单词首字母均为大写，且其余字母均为小写则返回 True，否则返回 False
    title()
    返回标题化即所有的单词首字母均为大写，且其余字母均为小写的字符串
    islower()
    如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
    isupper()
    如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
    join(sub)
    以字符串作为分隔符，插入到sub中所有的字符之间
    center(width[,fillchar])
    返回将原字符串居中，并使用填充字符 fillchar 填充至字符串总长度为 width 的新字符串，默认填充字符为空格
    ljust(width[,fillchar])
    返回一个左对齐，并使用填充字符 fillchar 填充至字符串总长度为 width 的新字符串，默认填充字符为空格
    rjust(width[,fillchar])
    返回一个右对齐，并使用填充字符 fillchar 填充至字符串总长度为 width 的新字符串，默认填充字符为空格
    zfill(width)
    返回长度为 width 的字符串，原字符串右对齐，左端用0填充
    lower()
    将字符串中所有大写字母转换为小写字母
    upper()
    将字符串中所有小写字母转换为大写字母
    strip([chars])
    删除字符串前边和后边所有的空格，可选参数 chars 可以指定删除的字符
    lstrip([chars])
    返回截掉字符串左边的指定字符 chars 后生成的新字符串，默认指定字符为空格
    rstrip([chars])
    返回截掉字符串末尾的指定字符 chars 后生成的新字符串，默认指定字符为空格
    partition(sub)
    找到子字符串 sub，把字符串分成一个3 元组( pre_sub , sub , fol_sub )，如果字符串中不包括sub则返回( ‘原字符串’ , ’ ’ , ’ ’ )
    rpartition(sub)
    与 partition() 方法类似，不过是从右边开始查找
    replace(old,new[,count])
    将字符串中的子字符串 old 替换为子字符串 new，如果 count 指定，则替换不超过 count 次
    split(sep=None, maxsplit=-1)
    不带参数默认是 以空格为分隔符 切片字符串，如果maxsplit参数有设置，则仅分隔maxsplit个子字符串，返回切片后的子字符串拼接的列表
    splitlines(([keepends]))
    按照 ‘\n’ 分隔，返回一个包含各行作为元素的列表，如果keepends参数指定，则返回前keepends行
    translate(table[,deletechars])
    根据参数table给出的表(包含 256 个字符)转换字符串的字符, 可选参数 deletechars 是字符串中要过滤的字符列表，返回翻译后的字符串
————————————————
str.split(’ ')

1.按某一个字符分割，如‘.’

>>> s = ('www.google.com')
>>> print(s)
www.google.com
>>> s.split('.')
['www', 'google', 'com']

    1
    2
    3
    4
    5

2.按某一个字符分割，且分割n次。如按‘.'分割1次；参数maxsplit位切割的次数

>>> s = 'www.google.com'
>>> s
'www.google.com'
>>> s.split('.', maxsplit=1)
['www', 'google.com']

    1
    2
    3
    4
    5

3.按某一字符串分割。如：‘||’

>>> s = 'WinXP||Win7||Win8||Win8.1'
>>> s
'WinXP||Win7||Win8||Win8.1'
>>> s.split('||')
['WinXP', 'Win7', 'Win8', 'Win8.1']
>>>

    1
    2
    3
    4
    5
    6

’ '.join(str)

Python中有join()和os.path.join()两个函数，具体作用如下：

join()： 连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串
os.path.join()： 将多个路径组合后返回

对序列进行操作（分别使用’ ‘与’:'作为分隔符）

>>> seq1 = ['hello','good','boy','doiido']
>>> print ' '.join(seq1)
hello good boy doiido
>>> print ':'.join(seq1)
hello:good:boy:doiido

    1
    2
    3
    4
    5

对字符串进行操作

>>> seq2 = "hello good boy doiido"
>>> print ':'.join(seq2)
h:e:l:l:o: :g:o:o:d: :b:o:y: :d:o:i:i:d:o

    1
    2
    3

对元组进行操作

>>> seq3 = ('hello','good','boy','doiido')
>>> print ':'.join(seq3)
hello:good:boy:doiido

    1
    2
    3

对元组进行操作

>>> seq3 = ('hello','good','boy','doiido')
>>> print ':'.join(seq3)
hello:good:boy:doiido

    1
    2
    3

对字典进行操作

>>> seq4 = {'hello':1,'good':2,'boy':3,'doiido':4}
>>> print ':'.join(seq4)
boy:good:doiido:hello

    1
    2
    3

合并目录

>>> import os
>>> os.path.join('/hello/','good/boy/','doiido')
'/hello/good/boy/doiido'

    1
    2
    3

str.strip()

声明：s为字符串，rm为要删除的字符序列

s.strip(rm) 删除s字符串中开头、结尾处，位于 rm删除序列的字符；
s.lstrip(rm) 删除s字符串中开头处，位于 rm删除序列的字符；
s.rstrip(rm) 删除s字符串中结尾处，位于 rm删除序列的字符；

    当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ’ ')

例如：

>>> a = '123abc'
>>> a.strip('21')
'3abc'  结果是一样的
>>> a.strip('12')
'3abc'

    1
    2
    3
    4
    5

2.这里的rm删除序列是只要边（开头或结尾）上的字符在删除序列内，就删除掉。

例如 ：

>>> a = '123abc'
>>> a.strip('21')
'3abc'  结果是一样的
>>> a.strip('12')
'3abc'
————————————————
版权声明：本文为CSDN博主「进阶程序员阿福」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/haoxun07/article/details/104451014